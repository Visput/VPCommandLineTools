#!/bin/sh

# vgit.sh
# A set of helpers for git client.
#
# Created by Uladzimir Papko on 8/16/15.
# Copyright (c) 2015 Visput. All rights reserved.

readonly VGIT_VERSION="0.1.0"

# Branch checkout.
#
# Looks for local branch with name that is partially or fully matching to 2-nd argument.
# Then checkouts found branch -> pulls updates ->
# -> updates submodules recursively -> shows git status.
# If several matches found then program allows user to select one.
# Usage: $ vgit co branch_name
#
vgit_branch_checkout() {
    local command_list=("co")

    for command in ${command_list[@]}; do
        if [[ "$1" = "$command" ]]; then
            local requested_branch="$2"
            local current_branch="."

            local found_branch_list
            if [[ "$requested_branch" = "$current_branch" ]]; then
                # If requested branch is current then it has to be used
                # without showing list of matches.
                found_branch_list=( "$requested_branch" )
            else
                found_branch_list=( $(git branch \
                                    | cut -c 3- \
                                    | grep -F --ignore-case "$requested_branch") )

                for found_branch in ${found_branch_list[@]}; do
                    if [[ "$requested_branch" = "$found_branch" ]]; then
                        # If full match found then it has to be used
                        # without showing list of matches.
                        found_branch_list=( "$requested_branch" )
                        break
                    fi
                done
            fi

            local found_branch_count="${#found_branch_list[@]}"

            if [[ "$found_branch_count" -eq 1 ]]; then
                git checkout "${found_branch_list[0]}"
                git pull
                git submodule update --recursive
                git status
            else
                if [[ "$found_branch_count" -gt 1 ]]; then
                    echo "'${requested_branch}' matches to $found_branch_count local branches:"
                else
                    echo "'${requested_branch}' doesn't match to any local branch:"
                    found_branch_list=( $(git branch | cut -c 3-) )
                    found_branch_count="${#found_branch_list[@]}"
                fi

                for (( i = 0 ; i < $found_branch_count ; i++ )) ; do
                    echo "${i}. ${found_branch_list[$i]}"
                done

                printf "Enter index of branch -> "
                read requested_branch_index

                if [[ "$requested_branch_index" -ge 0 ]] && \
                   [[ "$requested_branch_index" -lt "$found_branch_count" ]] ; then

                    requested_branch="${found_branch_list[$requested_branch_index]}"
                    vgit_checkout "${command_list[0]}" "$requested_branch"
                else
                    echo "Entered index is out of bounds"
                fi
            fi

            return 0
        fi
    done

    return 1
}

# Branch delete.
#
# Looks for local branch with name that is partially or fully
# matching to 2-nd argument. Then deletes found branch -> shows git status.
# If several matches found then program allows user to select one.
# If '-a' option is used then it deletes all branches with names that is partially or fully
# matching to 2-nd argument.
# Usage: $ vgit del branch_name
#        $ vgit del -a branch_name
#
vgit_branch_delete() {
    local command_list=("del")
    return 1
}

# Status.
#
# Shows git status.
# Usage: $ vgit st
#
vgit_status() {
    local command_list=("st")

    for command in ${command_list[@]}; do
        if [[ "$1" = "$command" ]]; then
            git status

            return 0
        fi
    done

    return 1
}

# Version.
#
# Shows current tool version.
# Usage: $ vgit version
#
vgit_version() {
    local command_list=("version")

    for command in ${command_list[@]}; do
        if [[ "$1" = "$command" ]]; then
            echo "vgit version $VGIT_VERSION"

            return 0
        fi
    done

    return 1
}

# Help.
#
# Shows documentation for supported commands.
# Usage: $ vgit help
#        $ vgit
#
vgit_help() {
    local command_list=("help")

    local command_handled=false
    if [[ "$#" -eq 0 ]]; then
        command_handled=true
    fi

    for command in ${command_list[@]}; do
        if [[ "$1" = "$command" ]]; then
            command_handled=true
            break
        fi
    done

    if $command_handled; then

cat << END
Help is currently in development.
Will be available soon.
END

        return 0
    fi

    return 1
}

# Execute every function with 'vgit' prefix declared in this file
# until command is handled (command_result = 0).
main() {
    local command_result=0
    local command_functions=$(compgen -A function | grep "vgit")
    for command_function in $command_functions; do
        $command_function "$@"

        command_result="$?"
        if [[ "$command_result" -eq 0 ]]; then
            break
        fi
    done

    if [[ "$command_result" -eq 1 ]]; then
        # No command matches.
        # Delegate execution to original 'git' tool.
        git "$@"

        # Show status when all done.
        if [[ "$1" != "status" ]]; then
            git status
        fi
    fi
}

main "$@"