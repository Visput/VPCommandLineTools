#!/bin/sh

# vgit.sh
# A set of extensions to git client.
#
# Created by Uladzimir Papko on 8/16/15.
# Copyright (c) 2015 Visput. All rights reserved.

readonly VGIT_VERSION="0.1.0"

# Global constants.
OPTION_HELP="--help"

# Branch checkout.
#
# Looks for local branch with name that is partially or fully matching to
# requested branch. Then checkouts found branch -> pulls updates ->
# -> updates submodules recursively -> shows git status.
# If several matches found then program allows user to select one.
# Usage: $ vgit co <branch>
#
vgit_branch_checkout() {
    local command="co"

    # Documentation.
    if [[ "$1" = "$command" ]] && [[ "$2" = "$OPTION_HELP" ]]; then
cat << END
vgit co
    Checkout a local branch
    Usage: $ vgit co <branch>
END
        return 0
    fi

    # Logic.
    if [[ "$1" = "$command" ]]; then
        local requested_branch="$2"
        local current_branch="."

        local found_branch_list
        if [[ "$requested_branch" = "$current_branch" ]]; then
            # If requested branch is current then it has to be used
            # without showing list of matches.
            found_branch_list=( "$requested_branch" )
        else
            # Find all matches to requested branch.
            found_branch_list=( $(git branch \
                                | cut -c 3- \
                                | grep -F --ignore-case "$requested_branch") )

            for found_branch in ${found_branch_list[@]}; do
                if [[ "$requested_branch" = "$found_branch" ]]; then
                    # If full match found then it has to be used
                    # without showing list of matches.
                    found_branch_list=( "$requested_branch" )
                    break
                fi
            done
        fi

        local found_branch_count="${#found_branch_list[@]}"

        if [[ "$found_branch_count" -eq 1 ]]; then
            git checkout "${found_branch_list[0]}" && \
            git pull && \
            git submodule update --recursive && \
            git status
        else
            if [[ "$found_branch_count" -gt 1 ]]; then
                echo "'${requested_branch}' matches to $found_branch_count local branches:"
            else
                echo "'${requested_branch}' doesn't match to any local branch:"
                found_branch_list=( $(git branch | cut -c 3-) )
                found_branch_count="${#found_branch_list[@]}"
            fi

            echo "0. -> Do nothing"
            for (( i = 0 ; i < $found_branch_count ; i++ )) ; do
                echo "$((i+1)). ${found_branch_list[$i]}"
            done

            printf "Enter index of branch to checkout -> "
            read requested_branch_index

            if [[ "$requested_branch_index" -ge 0 ]] && \
               [[ "$requested_branch_index" -lt "$((found_branch_count+1))" ]] ; then

                if [[ "$requested_branch_index" -ge 1 ]]; then
                    # Checkout selected branch from the list of matches.
                    requested_branch="${found_branch_list[$((requested_branch_index-1))]}"
                    vgit_branch_checkout "${command}" "$requested_branch"
                fi
            else
                echo "Entered index is out of bounds"
            fi
        fi

        return 0
    fi

    return 1
}

# Branch delete.
#
# Looks for local branch with name that is partially or fully
# matching to requested branch. Then deletes found branch ->
# -> shows updated list of branches -> shows git status.
# If several matches found then program allows user to select one or
# delete all of them.
# If '-a|--all' option is used then it deletes all branches with names that are
# partially or fully matching to requested branch.
# Usage: $ vgit del <branch>
#        $ vgit del -a <branch>
#        $ vgit del --all <branch>
#
vgit_branch_delete() {
    local command="del"
    local opt_all_short="-a"
    local opt_all_long="--all"

    # Documentation.
    if [[ "$1" = "$command" ]] && [[ "$2" = "$OPTION_HELP" ]]; then
cat << END
vgit del
    Delete a local branch
    Usage: $ vgit del <branch>
           $ vgit del -a <branch>
           $ vgit del --all <branch>
END
        return 0
    fi

    # Logic.
    if [[ "$1" = "$command" ]]; then
        # Parse arguments and options.
        local is_all_opt_on=false
        local requested_branch=""
        while [[ $# > 1 ]]; do
            argument="$2"
            case "$argument" in
                "${opt_all_short}"|"${opt_all_long}") is_all_opt_on=true ;;
                                                   *) requested_branch="$argument" ;;
            esac
            shift
        done

        if [[ "${#requested_branch}" -gt 0 ]]; then
            # Find all matches to requested branch.
            found_branch_list=( $(git branch \
                                | cut -c 3- \
                                | grep -F --ignore-case "$requested_branch") )

            for found_branch in ${found_branch_list[@]}; do
                if [[ "$requested_branch" = "$found_branch" ]]; then
                    # If full match found and --all option isn't used
                    # then it has to be used without showing list of matches.
                    if ! $is_all_opt_on; then
                        found_branch_list=( "$requested_branch" )
                        break
                    fi
                fi
            done

            local found_branch_count="${#found_branch_list[@]}"

            if [[ "$found_branch_count" -eq 1 ]]; then
                git branch -D "${found_branch_list[0]}" && \
                git branch && \
                git status
            elif [[ "$found_branch_count" -gt 1 ]]; then
                if $is_all_opt_on; then
                    local command_result=0
                    for found_branch in ${found_branch_list[@]}; do
                        git branch -D "$found_branch"
                        command_result="$?"
                        if [[ "$command_result" -eq 1 ]]; then
                            break
                        fi
                    done
                    if [[ "$command_result" -eq 0 ]]; then
                        git branch && \
                        git status
                    fi
                else
                    echo "'${requested_branch}' matches to $found_branch_count local branches:"
                    echo "0. -> Do nothing"
                    echo "1. -> Delete all found branches"
                    for (( i = 0 ; i < $found_branch_count ; i++ )) ; do
                        echo "$((i+2)). ${found_branch_list[$i]}"
                    done

                    printf "Enter index of branch to delete -> "
                    read requested_branch_index

                    if [[ "$requested_branch_index" -ge 0 ]] && \
                       [[ "$requested_branch_index" -lt "$((found_branch_count+2))" ]] ; then

                        if [[ "$requested_branch_index" -eq 1 ]]; then
                            # Option '1' is selected -> delete all matches.
                            vgit_branch_delete "${command}" "$requested_branch" "$opt_all_short"
                        elif [[ "$requested_branch_index" -gt 1 ]]; then
                            # Delete selected branch from the list of matches.
                            requested_branch="${found_branch_list[$((requested_branch_index-2))]}"
                            vgit_branch_delete "${command}" "$requested_branch"
                        fi
                    else
                        echo "Entered index is out of bounds"
                    fi
                fi
            else
                echo "'${requested_branch}' doesn't match to any local branch:"
                echo "0. -> Do nothing"
                found_branch_list=( $(git branch | cut -c 3-) )
                found_branch_count="${#found_branch_list[@]}"
                for (( i = 0 ; i < $found_branch_count ; i++ )) ; do
                    echo "$((i+1)). ${found_branch_list[$i]}"
                done

                printf "Enter index of branch to delete -> "
                read requested_branch_index

                if [[ "$requested_branch_index" -ge 0 ]] && \
                   [[ "$requested_branch_index" -lt "$((found_branch_count+1))" ]] ; then

                    if [[ "$requested_branch_index" -ge 1 ]]; then
                        # Delete selected branch from the list of matches.
                        requested_branch="${found_branch_list[$((requested_branch_index-1))]}"
                        vgit_branch_delete "${command}" "$requested_branch"
                    fi
                else
                    echo "Entered index is out of bounds"
                fi
            fi
        else
            echo "Branch name required"
        fi

        return 0
    fi

    return 1
}

# Status.
#
# Shows git status.
# Usage: $ vgit st
#
vgit_status() {
    local command="st"

    # Documentation.
    if [[ "$1" = "$command" ]] && [[ "$2" = "$OPTION_HELP" ]]; then
cat << END
vgit st
    Show the working tree status
    Usage: $ vgit st
END
        return 0
    fi

    # Logic.
    if [[ "$1" = "$command" ]]; then
        git status
        return 0
    fi

    return 1
}

# Version.
#
# Shows current tool version.
# Usage: $ vgit version
#
vgit_version() {
    local command="version"

    # Documentation.
    if [[ "$1" = "$command" ]] && [[ "$2" = "$OPTION_HELP" ]]; then
cat << END
vgit version
    Show vgit current version
    Usage: $ vgit version
END
        return 0
    fi

    # Logic.
    if [[ "$1" = "$command" ]]; then
        echo "vgit version $VGIT_VERSION"
        return 0
    fi

    return 1
}

# Help.
#
# Shows documentation for supported commands.
# Usage: $ vgit help <command>
#        $ vgit help
#        $ vgit
#
vgit_help() {
    local command="help"

    # Documentation.
    if [[ "$1" = "$command" ]] && [[ "$2" = "$OPTION_HELP" ]]; then
cat << END
vgit help
    Display help information about vgit
    Usage: $ vgit help <command>
           $ vgit help
           $ vgit
END
        return 0
    fi

    # Logic.
    local requested_command=""
    local command_handled=false
    if [[ "$#" -eq 0 ]]; then
        command_handled=true
    fi

    if [[ "$1" = "$command" ]]; then
        command_handled=true
        requested_command="$2"
    fi

    if $command_handled; then
        if [[ "${#requested_command}" -eq 0 ]]; then
            # No specific command is provided.
            # Show general help information.
cat << END
vgit commands:
    co         Checkout a local branch
    del        Delete a local branch
    st         Show the working tree status
    version    Show vgit current version
    help       Display help information about vgit

If any other command is used that is not presented in above list
then it will be delegated for execution to original git tool.

Use 'vgit help <command>' to read about a specific command.
END
        else
            # Execute every function with 'vgit' prefix declared in this file
            # until command is handled (command_result = 0).
            local command_result=0
            local command_functions=$(compgen -A function | grep "vgit")
            for command_function in $command_functions; do
                $command_function "$requested_command" "$OPTION_HELP"

                command_result="$?"
                if [[ "$command_result" -eq 0 ]]; then
                    break
                fi
            done

            if [[ "$command_result" -eq 1 ]]; then
                # Requested command isn't found.
                echo "vgit doesn't support command '${requested_command}'"
            fi
        fi

        return 0
    fi

    return 1
}

# Execute every function with 'vgit' prefix declared in this file
# until command is handled (command_result = 0).
main() {
    local command_result=0
    local command_functions=$(compgen -A function | grep "vgit")
    for command_function in $command_functions; do
        $command_function "$@"

        command_result="$?"
        if [[ "$command_result" -eq 0 ]]; then
            break
        fi
    done

    if [[ "$command_result" -eq 1 ]]; then
        # No command matches.
        # Delegate execution to original 'git' tool.
        git "$@"

        # Show status when all done.
        if [[ "$1" != "status" ]]; then
            git status
        fi
    fi

    return 0
}

main "$@"